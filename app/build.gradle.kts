import com.google.android.libraries.mapsplatform.secrets_gradle_plugin.SecretsPluginExtension
import java.util.Properties
import java.io.FileInputStream
import java.io.FileNotFoundException

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id("com.google.android.libraries.mapsplatform.secrets-gradle-plugin")
}

// Configure the secrets plugin extension at the top level
// This plugin helps manage API keys and other secrets by excluding them from version control.
extensions.configure<SecretsPluginExtension> {
    propertiesFileName = "secrets.properties" // Specifies the name of the secrets properties file (e.g., app/secrets.properties)
    defaultPropertiesFileName = "app/local.defaults.properties" // Specifies a default properties file if the main one isn't found.
    // ignoreMissingSecrets = false // When true, the build won't fail if secrets file is missing (not recommended for critical keys).
}

android {
    namespace = "com.example.dorzmvp"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.example.dorzmvp"
        minSdk = 26
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        // Access secrets using the secrets plugin extension.
        val secretsExtension = extensions.getByType(SecretsPluginExtension::class)
        var yangoApiKey = ""
        var yangoClid = ""

        // --- WORKAROUND: Manually load properties file ---
        // This section attempts to load YANGO_API_KEY and YANGO_CLID directly from the secrets file.
        // This is a workaround and ideally, the secrets plugin should handle this seamlessly.
        try {
            val propertiesFileName = secretsExtension.propertiesFileName
            val propertiesFile = project.file(propertiesFileName) 

            if (propertiesFile.exists()) {
                val props = Properties()
                FileInputStream(propertiesFile).use { fis ->
                    props.load(fis)
                }
                yangoApiKey = props.getProperty("YANGO_API_KEY", "") 
                yangoClid = props.getProperty("YANGO_CLID", "")     
                if (yangoApiKey.isEmpty() || yangoClid.isEmpty()){
                    println("WARNING: YANGO_API_KEY or YANGO_CLID not found in $propertiesFileName or is empty.")
                }
            } else {
                println("WARNING: Secrets properties file not found: ${propertiesFile.absolutePath}. Check 'propertiesFileName' in build.gradle and file location.")
            }
        } catch (e: FileNotFoundException) {
            println("ERROR: Secrets properties file not found during manual load. ${e.message}")
        } catch (e: Exception) {
            println("ERROR: Failed to manually load secrets properties. ${e.message}")
        }
        // --- END WORKAROUND ---

        // Expose secrets as BuildConfig fields, making them accessible in Kotlin code (e.g., BuildConfig.YANGO_API_KEY).
        buildConfigField("String", "YANGO_API_KEY", "\"$yangoApiKey\"")
        buildConfigField("String", "YANGO_CLID", "\"$yangoClid\"")
    }

    buildTypes {
        release {
            isMinifyEnabled = false // Disables code shrinking and obfuscation for release builds.
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro" // Specifies ProGuard rules files for code optimization and obfuscation.
            )
        }
        debug {
            // Debug build type configuration (currently empty, inherits defaults).
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11 // Sets Java language compatibility for source code.
        targetCompatibility = JavaVersion.VERSION_11 // Sets Java language compatibility for generated bytecode.
    }
    kotlinOptions {
        jvmTarget = "11" // Specifies the target JVM version for Kotlin compilation.
    }
    buildFeatures {
        compose = true // Enables Jetpack Compose for UI development.
        buildConfig = true // Enables generation of the BuildConfig class.
    }
    packaging {
        resources {
            // Excludes specific Kotlin built-ins meta-inf files to prevent packaging conflicts.
            excludes.add("kotlin/internal/internal.kotlin_builtins")
            excludes.add("kotlin/reflect/reflect.kotlin_builtins")
            excludes.add("kotlin/kotlin.kotlin_builtins")
            excludes.add("kotlin/coroutines/coroutines.kotlin_builtins")
            excludes.add("kotlin/ranges/ranges.kotlin_builtins")
            excludes.add("kotlin/collections/collections.kotlin_builtins")
            excludes.add("kotlin/annotation/annotation.kotlin_builtins")
        }
    }
}

dependencies {
    // Kotlin Standard Library and Compiler
    implementation(platform("org.jetbrains.kotlin:kotlin-bom:2.0.0"))
    implementation("org.jetbrains.kotlin:kotlin-compiler-embeddable")

    // AndroidX Core Libraries
    implementation(libs.androidx.core.ktx) // Kotlin extensions for AndroidX Core.
    implementation(libs.androidx.lifecycle.runtime.ktx) // Lifecycle runtime Kotlin extensions.
    implementation(libs.androidx.activity.compose) // Jetpack Compose integration for Activities.

    // Jetpack Compose
    implementation(platform(libs.androidx.compose.bom)) // Bill of Materials for Compose, manages versions of Compose libraries.
    implementation(libs.androidx.compose.ui) // Core UI components for Compose.
    implementation(libs.androidx.compose.ui.graphics) // Graphics primitives for Compose.
    implementation(libs.androidx.compose.ui.tooling.preview) // Tooling for Compose previews in Android Studio.
    implementation(libs.androidx.compose.material3) // Material Design 3 components for Compose.
    implementation("androidx.compose.runtime:runtime-livedata:+") // LiveData integration with Compose.
    implementation(libs.androidx.compose.foundation) // Foundation layout and building blocks for Compose.

    // Google Play Services and Maps
    implementation(libs.play.services.maps) // Google Play Services for Maps.
    implementation("com.google.maps.android:maps-compose:4.3.3") // Jetpack Compose components for Google Maps.
    implementation("com.google.android.libraries.places:places:3.5.0") // Google Places SDK for Android.

    // Asynchronous Programming
    implementation("androidx.concurrent:concurrent-futures-ktx:1.3.0") // Kotlin extensions for concurrent futures.
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.3") // Coroutines support for Google Play Services.

    // Utility Libraries
    implementation("com.google.guava:guava:32.1.3-android") // Google Guava libraries for Android.

    // Google Engage Core (Purpose might need further clarification based on usage)
    implementation(libs.engage.core)

    // Testing Libraries
    testImplementation(libs.junit) // JUnit for unit testing.
    androidTestImplementation(libs.androidx.junit) // AndroidX Test library for UI testing.
    androidTestImplementation(libs.androidx.espresso.core) // Espresso for UI testing.
    androidTestImplementation(platform(libs.androidx.compose.bom)) // Compose Bill of Materials for testing.
    androidTestImplementation(libs.androidx.compose.ui.test.junit4) // Compose UI testing utilities for JUnit4.
    debugImplementation(libs.androidx.compose.ui.tooling) // Debug tools for Compose.
    debugImplementation(libs.androidx.compose.ui.test.manifest) // Test manifest for Compose.

    // Navigation
    val nav_version = "2.9.3"
    implementation("androidx.navigation:navigation-compose:$nav_version") // Jetpack Navigation for Compose.

    // Networking (Retrofit and OkHttp)
    implementation("com.squareup.retrofit2:retrofit:2.9.0") // Retrofit for type-safe HTTP client.
    implementation("com.squareup.retrofit2:converter-gson:2.9.0") // Gson converter for Retrofit (JSON serialization/deserialization).
    // OkHttp Logging Interceptor: Used for logging HTTP request and response data, invaluable for debugging network issues.
    // It helps inspect headers, bodies, and metadata of network communication.
    implementation("com.squareup.okhttp3:logging-interceptor:4.10.0")

    // Constraints (Resolves dependency conflicts)
    constraints {
        implementation("com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava") {
            because("Guava already includes ListenableFuture, and this special version is empty and resolves conflicts.")
        }
    }
}
